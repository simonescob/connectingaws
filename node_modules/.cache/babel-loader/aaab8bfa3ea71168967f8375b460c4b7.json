{"ast":null,"code":"\"use strict\";\n\nvar __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n};\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar styled_1 = __importDefault(require(\"@emotion/styled\"));\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar _1 = __importDefault(require(\"./\"));\n\nvar volume_1 = require(\"./controls/volume\");\n\nvar VideoContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 0;\\n    right: 0;\\n    height: 100%;\\n    width: 100%;\\n\"], [\"\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 0;\\n    right: 0;\\n    height: 100%;\\n    width: 100%;\\n\"])));\nvar VideoStyled = styled_1.default(_1.default)(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n    height: 100%;\\n    display: inline-block;\\n    object-fit: fill;\\n    pointer-events: none;\\n    background: rgb(0, 0, 0, 0);\\n\"], [\"\\n    height: 100%;\\n    display: inline-block;\\n    object-fit: fill;\\n    pointer-events: none;\\n    background: rgb(0, 0, 0, 0);\\n\"])));\nvar Button = styled_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n    position: absolute;\\n    top: 6px;\\n    right: 6px;\\n    cursor: pointer;\\n    opacity: \", \";\\n    transition: opacity ease-out 800ms;\\n\"], [\"\\n    position: absolute;\\n    top: 6px;\\n    right: 6px;\\n    cursor: pointer;\\n    opacity: \", \";\\n    transition: opacity ease-out 800ms;\\n\"])), function (props) {\n  return props.isHovered ? 1 : 0.8;\n});\nvar speakerClassName = 'giphy-video-overlay-button';\n\nvar VolumeButton = function (_a) {\n  var muted = _a.muted,\n      toggleMute = _a.toggleMute,\n      mutedByBrowser = _a.mutedByBrowser,\n      isHovered = _a.isHovered;\n  return react_1.default.createElement(Button, {\n    className: speakerClassName,\n    onClick: function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      toggleMute();\n    },\n    isHovered: isHovered\n  }, muted || mutedByBrowser || !isHovered ? react_1.default.createElement(volume_1.VolumeOffIcon, null) : react_1.default.createElement(volume_1.VolumeOnIcon, null));\n};\n\nvar VideoOverlay = function (_a) {\n  var gif = _a.gif,\n      isHovered = _a.isHovered,\n      hideMuteButton = _a.hideMuteButton,\n      width = _a.width,\n      height = _a.height,\n      className = _a.className,\n      _b = _a.muted,\n      userPrefMuted = _b === void 0 ? false : _b,\n      onUserMuted = _a.onUserMuted;\n\n  var _c = react_1.useState(userPrefMuted),\n      muted = _c[0],\n      setMuted = _c[1];\n\n  var _d = react_1.useState(false),\n      mutedByBrowser = _d[0],\n      setMutedByBrowser = _d[1];\n\n  var toggleMute = function () {\n    if (mutedByBrowser) {\n      setMutedByBrowser(false);\n      setMuted(false);\n    } else {\n      onUserMuted === null || onUserMuted === void 0 ? void 0 : onUserMuted(!muted);\n      setMuted(!muted);\n    }\n  };\n\n  react_1.useEffect(function () {\n    setMuted(userPrefMuted);\n  }, [userPrefMuted, setMuted]);\n  var props = {\n    toggleMute: toggleMute,\n    muted: muted,\n    mutedByBrowser: mutedByBrowser\n  };\n  return react_1.default.createElement(VideoContainer, {\n    className: className\n  }, isHovered && react_1.default.createElement(VideoStyled, {\n    gif: gif,\n    key: gif.id,\n    loop: true,\n    controls: true,\n    hideAttribution: true,\n    hideMute: true,\n    persistentControls: true,\n    muted: muted,\n    width: width,\n    height: height,\n    onMuted: setMutedByBrowser\n  }), !hideMuteButton && react_1.default.createElement(VolumeButton, __assign({}, props, {\n    isHovered: isHovered\n  })));\n};\n\nVideoOverlay.imgClassName = speakerClassName;\nexports.default = VideoOverlay;\nvar templateObject_1, templateObject_2, templateObject_3;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA,IAAMA,cAAc,GAAGC,iBAAOC,GAAP,CAAUC,6TAAV,CAAvB;AAUA,IAAMC,WAAW,GAAGH,iBAAOI,UAAP,EAAaC,mVAAb,CAApB;AAOA,IAAMC,MAAM,GAAGN,iBAAOC,GAAP,CAAUM,kNAAwB,gGAAxB,EAK4B,8CAL5B,GAAV,EAKA,UAACC,KAAD,EAAM;AAAK,SAACA,KAAK,CAACC,SAAN,GAAkB,CAAlB,GAAsB,GAAvB;AAA2B,CALtC,CAAf;AASA,IAAMC,gBAAgB,GAAG,4BAAzB;;AAOA,IAAMC,YAAY,GAAG,UAACC,EAAD,EAA6F;MAA1FC,KAAK;MAAEC,UAAU;MAAEC,cAAc;MAAEN,SAAS;AAAmD,SACnHO,8BAACV,MAAD,EAAO;AACHW,aAAS,EAAEP,gBADR;AAEHQ,WAAO,EAAE,UAACC,CAAD,EAAE;AACPA,OAAC,CAACC,cAAF;AACAD,OAAC,CAACE,eAAF;AACAP,gBAAU;AACb,KANE;AAOHL,aAAS,EAAEA;AAPR,GAAP,EASKI,KAAK,IAAIE,cAAT,IAA2B,CAACN,SAA5B,GAAwCO,8BAACM,sBAAD,EAAc,IAAd,CAAxC,GAA4DN,8BAACM,qBAAD,EAAa,IAAb,CATjE,CADmH;AAYtH,CAZD;;AAcA,IAAMC,YAAY,GAAG,UAACX,EAAD,EAgBpB;MAfGY,GAAG;MACHf,SAAS;MACTgB,cAAc;MACdC,KAAK;MACLC,MAAM;MACNV,SAAS;MACTW;MAAOC,aAAa,mBAAG,KAAH,GAAQD;MAC5BE,WAAW;;AASL,WAAoBd,iBAA8Ba,aAA9B,CAApB;AAAA,MAAChB,KAAK,QAAN;AAAA,MAAQkB,QAAQ,QAAhB;;AACA,WAAsCf,iBAAS,KAAT,CAAtC;AAAA,MAACD,cAAc,QAAf;AAAA,MAAiBiB,iBAAiB,QAAlC;;AAEN,MAAMlB,UAAU,GAAG;AACf,QAAIC,cAAJ,EAAoB;AAChBiB,uBAAiB,CAAC,KAAD,CAAjB;AACAD,cAAQ,CAAC,KAAD,CAAR;AACH,KAHD,MAGO;AACHD,iBAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAG,CAACjB,KAAJ,CAAX;AACAkB,cAAQ,CAAC,CAAClB,KAAF,CAAR;AACH;AACJ,GARD;;AASAG,oBAAU;AACNe,YAAQ,CAACF,aAAD,CAAR;AACH,GAFD,EAEG,CAACA,aAAD,EAAgBE,QAAhB,CAFH;AAIA,MAAMvB,KAAK,GAAG;AAAEM,cAAU,YAAZ;AAAcD,SAAK,OAAnB;AAAqBE,kBAAc;AAAnC,GAAd;AACA,SACIC,8BAACjB,cAAD,EAAe;AAACkB,aAAS,EAAEA;AAAZ,GAAf,EACKR,SAAS,IACNO,8BAACb,WAAD,EAAY;AACRqB,OAAG,EAAEA,GADG;AAERS,OAAG,EAAET,GAAG,CAACU,EAFD;AAGRC,QAAI,MAHI;AAIRC,YAAQ,MAJA;AAKRC,mBAAe,MALP;AAMRC,YAAQ,MANA;AAORC,sBAAkB,MAPV;AAQR1B,SAAK,EAAEA,KARC;AASRa,SAAK,EAAEA,KATC;AAURC,UAAM,EAAEA,MAVA;AAWRa,WAAO,EAAER;AAXD,GAAZ,CAFR,EAgBK,CAACP,cAAD,IAAmBT,8BAACL,YAAD,EAAa8B,aAAKjC,KAAL,EAAU;AAAEC,aAAS,EAAEA;AAAb,GAAV,CAAb,CAhBxB,CADJ;AAoBH,CAtDD;;AAwDAc,YAAY,CAACmB,YAAb,GAA4BhC,gBAA5B;AACAiC,kBAAepB,YAAf","names":["VideoContainer","styled_1","div","templateObject_1","VideoStyled","_1","templateObject_2","Button","templateObject_3","props","isHovered","speakerClassName","VolumeButton","_a","muted","toggleMute","mutedByBrowser","react_1","className","onClick","e","preventDefault","stopPropagation","volume_1","VideoOverlay","gif","hideMuteButton","width","height","_b","userPrefMuted","onUserMuted","setMuted","setMutedByBrowser","key","id","loop","controls","hideAttribution","hideMute","persistentControls","onMuted","__assign","imgClassName","exports"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/react-components/src/components/video/video-overlay.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport React, { useEffect, useState } from 'react'\nimport { GifOverlayProps } from '../types'\nimport Video from './'\nimport { VolumeOffIcon, VolumeOnIcon } from './controls/volume'\n\nconst VideoContainer = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    height: 100%;\n    width: 100%;\n`\n\nconst VideoStyled = styled(Video)`\n    height: 100%;\n    display: inline-block;\n    object-fit: fill;\n    pointer-events: none;\n    background: rgb(0, 0, 0, 0);\n`\nconst Button = styled.div<{ isHovered: boolean }>`\n    position: absolute;\n    top: 6px;\n    right: 6px;\n    cursor: pointer;\n    opacity: ${(props) => (props.isHovered ? 1 : 0.8)};\n    transition: opacity ease-out 800ms;\n`\n\nconst speakerClassName = 'giphy-video-overlay-button'\n\ntype VolumeButtonProps = {\n    toggleMute: () => void\n    muted: boolean | undefined\n    mutedByBrowser: boolean\n}\nconst VolumeButton = ({ muted, toggleMute, mutedByBrowser, isHovered }: VolumeButtonProps & { isHovered: boolean }) => (\n    <Button\n        className={speakerClassName}\n        onClick={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            toggleMute()\n        }}\n        isHovered={isHovered}\n    >\n        {muted || mutedByBrowser || !isHovered ? <VolumeOffIcon /> : <VolumeOnIcon />}\n    </Button>\n)\n\nconst VideoOverlay = ({\n    gif,\n    isHovered,\n    hideMuteButton,\n    width,\n    height,\n    className,\n    muted: userPrefMuted = false,\n    onUserMuted,\n}: GifOverlayProps & {\n    width: number\n    height?: number\n    className?: string\n    muted?: boolean // force this to be muted\n    hideMuteButton?: boolean\n    onUserMuted?: (muted: boolean) => void // for saving the state of the user muted\n}) => {\n    const [muted, setMuted] = useState<boolean | undefined>(userPrefMuted)\n    const [mutedByBrowser, setMutedByBrowser] = useState(false)\n\n    const toggleMute = () => {\n        if (mutedByBrowser) {\n            setMutedByBrowser(false)\n            setMuted(false)\n        } else {\n            onUserMuted?.(!muted)\n            setMuted(!muted)\n        }\n    }\n    useEffect(() => {\n        setMuted(userPrefMuted)\n    }, [userPrefMuted, setMuted])\n\n    const props = { toggleMute, muted, mutedByBrowser }\n    return (\n        <VideoContainer className={className}>\n            {isHovered && (\n                <VideoStyled\n                    gif={gif}\n                    key={gif.id}\n                    loop\n                    controls\n                    hideAttribution\n                    hideMute\n                    persistentControls\n                    muted={muted}\n                    width={width}\n                    height={height}\n                    onMuted={setMutedByBrowser}\n                />\n            )}\n            {!hideMuteButton && <VolumeButton {...props} isHovered={isHovered} />}\n        </VideoContainer>\n    )\n}\n\nVideoOverlay.imgClassName = speakerClassName\nexport default VideoOverlay\n"]},"metadata":{},"sourceType":"script"}