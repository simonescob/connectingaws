{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_ERROR = exports.ERROR_PREFIX = void 0;\n\nvar constants_1 = require(\"./constants\");\n\nvar fetch_error_1 = __importDefault(require(\"./fetch-error\"));\n\nexports.ERROR_PREFIX = \"@giphy/js-fetch-api: \";\nexports.DEFAULT_ERROR = 'Error fetching';\n\nvar identity = function (i) {\n  return i;\n};\n\nvar requestMap = {};\nvar maxLife = 60000; // clear memory cache every minute\n\nvar errorMaxLife = 6000; // clear error memory cache after a second\n\nvar purgeCache = function () {\n  var now = Date.now();\n  Object.keys(requestMap).forEach(function (key) {\n    var ttl = requestMap[key].isError ? errorMaxLife : maxLife;\n\n    if (now - requestMap[key].ts >= ttl) {\n      delete requestMap[key];\n    }\n  });\n};\n\nfunction request(url, normalizer, noCache) {\n  var _this = this;\n\n  if (normalizer === void 0) {\n    normalizer = identity;\n  }\n\n  if (noCache === void 0) {\n    noCache = false;\n  }\n\n  purgeCache();\n\n  if (!requestMap[url] || noCache) {\n    var makeRequest = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var fetchError, response, result, message, result, _1, unexpectedError_1;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 9,, 10]);\n\n              return [4\n              /*yield*/\n              , fetch(\"\" + constants_1.serverUrl + url, {\n                method: 'get'\n              })];\n\n            case 1:\n              response = _b.sent();\n              if (!response.ok) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , response.json()];\n\n            case 2:\n              result = _b.sent(); // no response id is an indiication of a synthetic response\n\n              if (!((_a = result.meta) === null || _a === void 0 ? void 0 : _a.response_id)) {\n                throw {\n                  message: \"synthetic response\"\n                };\n              } else {\n                // if everything is successful, we return here, otherwise an error will be thrown\n                return [2\n                /*return*/\n                , normalizer(result)];\n              }\n\n              return [3\n              /*break*/\n              , 8];\n\n            case 3:\n              message = exports.DEFAULT_ERROR;\n              _b.label = 4;\n\n            case 4:\n              _b.trys.push([4, 6,, 7]);\n\n              return [4\n              /*yield*/\n              , response.json()];\n\n            case 5:\n              result = _b.sent();\n              if (result.message) message = result.message;\n              return [3\n              /*break*/\n              , 7];\n\n            case 6:\n              _1 = _b.sent();\n              return [3\n              /*break*/\n              , 7];\n\n            case 7:\n              if (requestMap[url]) {\n                // we got a specific error,\n                // normally, you'd want to not fetch this again,\n                // but the api goes down and sends 400s, so allow a refetch after errorMaxLife\n                requestMap[url].isError = true;\n              } // we got an error response, throw with the message in the response body json\n\n\n              fetchError = new fetch_error_1.default(\"\" + exports.ERROR_PREFIX + message, response.status, response.statusText);\n              _b.label = 8;\n\n            case 8:\n              return [3\n              /*break*/\n              , 10];\n\n            case 9:\n              unexpectedError_1 = _b.sent();\n              fetchError = new fetch_error_1.default(unexpectedError_1.message); // if the request fails with an unspecfied error,\n              // the user can request again after the error timeout\n\n              if (requestMap[url]) {\n                requestMap[url].isError = true;\n              }\n\n              return [3\n              /*break*/\n              , 10];\n\n            case 10:\n              throw fetchError;\n          }\n        });\n      });\n    };\n\n    requestMap[url] = {\n      request: makeRequest(),\n      ts: Date.now()\n    };\n  }\n\n  return requestMap[url].request;\n}\n\nexports.default = request;","map":{"version":3,"mappings":"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","names":["exports","identity","i","requestMap","maxLife","errorMaxLife","purgeCache","now","Date","Object","keys","forEach","key","ttl","isError","ts","request","url","normalizer","noCache","makeRequest","fetch","constants_1","method","response","_b","ok","json","result","meta","_a","response_id","message","fetchError","fetch_error_1","status","statusText","unexpectedError_1"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/js-fetch-api/src/request.ts"],"sourcesContent":["import { serverUrl } from './constants'\nimport FetchError from './fetch-error'\nimport { ErrorResult, Result } from './result-types'\n\nexport const ERROR_PREFIX = `@giphy/js-fetch-api: `\nexport const DEFAULT_ERROR = 'Error fetching'\n\nconst identity = (i: any) => i\nconst requestMap: {\n    [key: string]: {\n        request: Promise<Result>\n        ts: number // timestamp\n        isError?: boolean\n    }\n} = {}\n\nconst maxLife = 60000 // clear memory cache every minute\nconst errorMaxLife = 6000 // clear error memory cache after a second\n\nconst purgeCache = () => {\n    const now = Date.now()\n    Object.keys(requestMap).forEach((key: string) => {\n        const ttl = requestMap[key].isError ? errorMaxLife : maxLife\n        if (now - requestMap[key].ts >= ttl) {\n            delete requestMap[key]\n        }\n    })\n}\n\nfunction request(url: string, normalizer: (a: any) => any = identity, noCache: boolean = false) {\n    purgeCache()\n    if (!requestMap[url] || noCache) {\n        const makeRequest = async (): Promise<Result> => {\n            let fetchError: FetchError\n            try {\n                const response = await fetch(`${serverUrl}${url}`, {\n                    method: 'get',\n                })\n                if (response.ok) {\n                    const result = (await response.json()) as Result\n                    // no response id is an indiication of a synthetic response\n                    if (!result.meta?.response_id) {\n                        throw { message: `synthetic response` } as ErrorResult\n                    } else {\n                        // if everything is successful, we return here, otherwise an error will be thrown\n                        return normalizer(result)\n                    }\n                } else {\n                    let message = DEFAULT_ERROR\n                    try {\n                        // error results have a different format than regular results\n                        const result = (await response.json()) as ErrorResult\n                        if (result.message) message = result.message\n                    } catch (_) {}\n                    if (requestMap[url]) {\n                        // we got a specific error,\n                        // normally, you'd want to not fetch this again,\n                        // but the api goes down and sends 400s, so allow a refetch after errorMaxLife\n                        requestMap[url].isError = true\n                    }\n\n                    // we got an error response, throw with the message in the response body json\n                    fetchError = new FetchError(`${ERROR_PREFIX}${message}`, response.status, response.statusText)\n                }\n            } catch (unexpectedError) {\n                fetchError = new FetchError(unexpectedError.message)\n                // if the request fails with an unspecfied error,\n                // the user can request again after the error timeout\n                if (requestMap[url]) {\n                    requestMap[url].isError = true\n                }\n            }\n            throw fetchError\n        }\n        requestMap[url] = { request: makeRequest(), ts: Date.now() }\n    }\n    return requestMap[url].request\n}\n\nexport default request\n"]},"metadata":{},"sourceType":"script"}