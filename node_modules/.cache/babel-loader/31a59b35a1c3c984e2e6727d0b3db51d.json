{"ast":null,"code":"var _jsxFileName = \"/home/simo/programming/web/projects/search-gifs/src/components/inputSearch.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst gf = new GiphyFetch('0U6DW1ZMVMxiwu9Rk5tqnm4SgbfnpGmT');\n\nconst InputSearch = () => {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  }; // configure your fetch: fetch 10 gifs at a time as the user scrolls (offset is handled by the grid)\n\n\n  const fetchGifs = offset => gf.trending({\n    offset,\n    limit: 10\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search GIFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => handleChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(InputSearch, \"42GASUL8pX2/N6Oh5HTh0GvQEF0=\");\n\n_c = InputSearch;\nexport default InputSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSearch\");","map":{"version":3,"sources":["/home/simo/programming/web/projects/search-gifs/src/components/inputSearch.tsx"],"names":["React","useState","GiphyFetch","gf","InputSearch","search","setSearch","handleChange","e","target","value","fetchGifs","offset","trending","limit"],"mappings":";;;AAAA,OAAOA,KAAP,IAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,UAAT,QAA2B,qBAA3B;;;AAEA,MAAMC,EAAE,GAAG,IAAID,UAAJ,CAAe,kCAAf,CAAX;;AAEA,MAAME,WAAW,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMM,YAAY,GAAIC,CAAD,IAAsC;AACzDF,IAAAA,SAAS,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAFD,CAJwB,CAQxB;;;AACA,QAAMC,SAAS,GAAIC,MAAD,IAAoBT,EAAE,CAACU,QAAH,CAAY;AAAED,IAAAA,MAAF;AAAUE,IAAAA,KAAK,EAAE;AAAjB,GAAZ,CAAtC;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEN,CAAC,IAAID,YAAY,CAACC,CAAD;AAA9C;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA,gBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAWD,CAtBD;;GAAMD,W;;KAAAA,W;AAwBN,eAAeA,WAAf","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\nimport { Grid } from '@giphy/react-components';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\n\nconst gf = new GiphyFetch('0U6DW1ZMVMxiwu9Rk5tqnm4SgbfnpGmT');\n\nconst InputSearch = () => {\n\n  const [search, setSearch] = useState(\"\");\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }\n\n  // configure your fetch: fetch 10 gifs at a time as the user scrolls (offset is handled by the grid)\n  const fetchGifs = (offset: number) => gf.trending({ offset, limit: 10 });\n\n  return (\n    <>\n      <h2>Search GIFS</h2>\n\n      <input type=\"text\" onChange={e => handleChange(e)} />\n\n      <p>{search}</p>\n\n      {/* <Grid width={800} columns={3} fetchGifs={fetchGifs} key={} /> */}\n    </>\n  );\n}\n\nexport default InputSearch;"]},"metadata":{},"sourceType":"module"}