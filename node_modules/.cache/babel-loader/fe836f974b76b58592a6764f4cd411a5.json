{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"uuid\");\n\nvar pingbackId = '';\nvar idLength = 16;\n/* istanbul ignore next */\n\nvar noUUIDRandom = function () {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < idLength; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n};\n\nvar getPingbackId = function () {\n  // it exists in memory\n  if (!pingbackId) {\n    try {\n      // it exists in storage\n      pingbackId = sessionStorage.getItem('giphyPingbackId');\n    } catch (_) {}\n\n    if (!pingbackId) {\n      // we need to create it\n      var hexTime = new Date().getTime().toString(16); // was told to mimic what we had\n\n      try {\n        // React Native doesn't support uuid without a polyfill\n        pingbackId = (\"\" + hexTime + uuid_1.v4().replace(/-/g, '')).substring(0, idLength); // 16 character max\n      } catch (error) {\n        /* istanbul ignore next */\n        pingbackId = noUUIDRandom();\n      }\n\n      try {\n        // save in storage\n        sessionStorage.setItem('giphyPingbackId', pingbackId);\n      } catch (_) {}\n    }\n  }\n\n  return pingbackId;\n};\n\nexports.default = getPingbackId;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA,IAAIA,UAAU,GAAG,EAAjB;AAEA,IAAMC,QAAQ,GAAG,EAAjB;AAEA;;AACA,IAAMC,YAAY,GAAG;AACjB,MAAIC,MAAM,GAAG,EAAb;AACA,MAAMC,UAAU,GAAG,gEAAnB;AACA,MAAMC,gBAAgB,GAAGD,UAAU,CAACE,MAApC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,EAA/B,EAAmC;AAC/BJ,UAAM,IAAIC,UAAU,CAACI,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,gBAA3B,CAAlB,CAAV;AACH;;AACD,SAAOF,MAAP;AACH,CARD;;AASA,IAAMS,aAAa,GAAG;AAClB;AACA,MAAI,CAACZ,UAAL,EAAiB;AACb,QAAI;AACA;AACAA,gBAAU,GAAGa,cAAc,CAACC,OAAf,CAAuB,iBAAvB,CAAb;AACH,KAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AACd,QAAI,CAACf,UAAL,EAAiB;AACb;AACA,UAAMgB,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,CAA8B,EAA9B,CAAhB,CAFa,CAEqC;;AAClD,UAAI;AACA;AACAnB,kBAAU,GAAG,MAAGgB,OAAH,GAAaI,YAAOC,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAb,EAAwCC,SAAxC,CAAkD,CAAlD,EAAqDrB,QAArD,CAAb,CAFA,CAE4E;AAC/E,OAHD,CAGE,OAAOsB,KAAP,EAAc;AACZ;AACAvB,kBAAU,GAAGE,YAAY,EAAzB;AACH;;AACD,UAAI;AACA;AACAW,sBAAc,CAACW,OAAf,CAAuB,iBAAvB,EAA0CxB,UAA1C;AACH,OAHD,CAGE,OAAOe,CAAP,EAAU,CAAE;AACjB;AACJ;;AACD,SAAOf,UAAP;AACH,CAxBD;;AA0BAyB,kBAAeb,aAAf","names":["pingbackId","idLength","noUUIDRandom","result","characters","charactersLength","length","i","charAt","Math","floor","random","getPingbackId","sessionStorage","getItem","_","hexTime","Date","getTime","toString","uuid_1","replace","substring","error","setItem","exports"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/js-util/src/get-pingback-id.ts"],"sourcesContent":["import { v4 as uuid } from 'uuid'\nlet pingbackId = ''\n\nconst idLength = 16\n\n/* istanbul ignore next */\nconst noUUIDRandom = () => {\n    let result = ''\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    for (let i = 0; i < idLength; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n}\nconst getPingbackId = () => {\n    // it exists in memory\n    if (!pingbackId) {\n        try {\n            // it exists in storage\n            pingbackId = sessionStorage.getItem('giphyPingbackId') as string\n        } catch (_) {}\n        if (!pingbackId) {\n            // we need to create it\n            const hexTime = new Date().getTime().toString(16) // was told to mimic what we had\n            try {\n                // React Native doesn't support uuid without a polyfill\n                pingbackId = `${hexTime}${uuid().replace(/-/g, '')}`.substring(0, idLength) // 16 character max\n            } catch (error) {\n                /* istanbul ignore next */\n                pingbackId = noUUIDRandom()\n            }\n            try {\n                // save in storage\n                sessionStorage.setItem('giphyPingbackId', pingbackId)\n            } catch (_) {}\n        }\n    }\n    return pingbackId\n}\n\nexport default getPingbackId\n"]},"metadata":{},"sourceType":"script"}