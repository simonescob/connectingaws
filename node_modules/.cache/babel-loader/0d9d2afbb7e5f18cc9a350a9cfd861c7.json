{"ast":null,"code":"\"use strict\";\n\nvar __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@emotion/core\");\n\nvar js_brand_1 = require(\"@giphy/js-brand\");\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar useDebounce_1 = __importDefault(require(\"react-use/lib/useDebounce\"));\n\nvar context_1 = require(\"./context\");\n\nvar search_bar_channel_1 = __importDefault(require(\"./search-bar-channel\"));\n\nvar search_button_1 = __importDefault(require(\"./search-button\"));\n\nvar theme_1 = __importStar(require(\"./theme\"));\n\nfunction usePrevious(value) {\n  var ref = react_1.useRef(value);\n  react_1.useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nvar SEARCH_DEBOUNCE = 500;\nvar Container = theme_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    display: flex;\\n    background: white;\\n    \", \"\\n\"], [\"\\n    display: flex;\\n    background: white;\\n    \", \"\\n\"])), function (props) {\n  return theme_1.getSize(props.theme);\n});\nvar Input = theme_1.default.input(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n    background: \", \";\\n    box-sizing: border-box;\\n    border: 0;\\n    appearance: none;\\n    font-weight: normal;\\n    font-family: interface, Helvetica Neue, helvetica, sans-serif;\\n    outline: 0;\\n    font-size: 15px;\\n    padding: 0 10px;\\n    border-radius: 0;\\n    text-overflow: ellipsis;\\n    color: \", \";\\n    &::placeholder {\\n        color: \", \";\\n    }\\n    min-width: 150px;\\n    flex: 1;\\n    \", \"\\n\"], [\"\\n    background: \", \";\\n    box-sizing: border-box;\\n    border: 0;\\n    appearance: none;\\n    font-weight: normal;\\n    font-family: interface, Helvetica Neue, helvetica, sans-serif;\\n    outline: 0;\\n    font-size: 15px;\\n    padding: 0 10px;\\n    border-radius: 0;\\n    text-overflow: ellipsis;\\n    color: \", \";\\n    &::placeholder {\\n        color: \", \";\\n    }\\n    min-width: 150px;\\n    flex: 1;\\n    \", \"\\n\"])), function (props) {\n  return props.theme.mode === 'dark' ? js_brand_1.giphyCharcoal : js_brand_1.giphyWhite;\n}, function (props) {\n  return props.theme.mode === 'dark' ? js_brand_1.giphyWhite : js_brand_1.giphyBlack;\n}, function (props) {\n  return props.theme.mode === 'dark' ? js_brand_1.giphyLightGrey : js_brand_1.giphyLightGrey;\n}, function (props) {\n  return props.isUsernameSearch && core_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n            color: \", \";\\n        \"], [\"\\n            color: \", \";\\n        \"])), js_brand_1.giphyIndigo);\n});\n\nvar SearchBar = function (_a) {\n  var className = _a.className,\n      _b = _a.placeholder,\n      placeholder = _b === void 0 ? \"Search GIPHY\" : _b,\n      _c = _a.clear,\n      clear = _c === void 0 ? false : _c,\n      autoFocus = _a.autoFocus;\n\n  var _d = react_1.useContext(context_1.SearchContext),\n      setSearch = _d.setSearch,\n      activeChannel = _d.activeChannel,\n      setActiveChannel = _d.setActiveChannel,\n      term = _d.term,\n      channelSearch = _d.channelSearch; // debounce local input\n\n\n  var _e = react_1.useState(term),\n      debouncedTerm = _e[0],\n      setDebouncedInput = _e[1]; // used to see if the last term was a '' before clearing\n\n\n  var lastTerm = usePrevious(debouncedTerm); // set the term when it changes\n\n  useDebounce_1.default(function () {\n    return setSearch(debouncedTerm);\n  }, SEARCH_DEBOUNCE, [debouncedTerm]); // used only to focus the input\n\n  var inputRef = react_1.useRef(null); // we'll use this to see when we went from no channel to channel\n\n  var previousActiveChannel = usePrevious(activeChannel);\n  react_1.useEffect(function () {\n    var _a;\n\n    if (autoFocus) {\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [autoFocus]);\n  react_1.useEffect(function () {\n    var _a; // if we know have a channel, focus and clear the input\n    // so the user can search the channel\n\n\n    if (activeChannel && !previousActiveChannel) {\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      setDebouncedInput('');\n    }\n  }, [debouncedTerm, activeChannel, previousActiveChannel]); // a pill could have been clicked, update our local term state\n\n  react_1.useEffect(function () {\n    setDebouncedInput(term);\n  }, [term]);\n\n  var _f = react_1.useState(clear),\n      isCleared = _f[0],\n      setCleared = _f[1];\n\n  react_1.useEffect(function () {\n    setCleared(clear);\n  }, [clear]); // key ups to clear the active channel\n\n  var onKeyUp = function (e) {\n    var key = e.keyCode || e.key;\n\n    switch (key) {\n      case 8: // backspace\n\n      case 'Backspace':\n        if (lastTerm === '') {\n          setActiveChannel(undefined);\n        }\n\n        break;\n\n      case 27: // esc\n\n      case \"Escape\":\n        // esc\n        setActiveChannel(undefined);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return react_1.default.createElement(Container, {\n    className: [SearchBar.className, className].join(' ')\n  }, react_1.default.createElement(search_bar_channel_1.default, null), react_1.default.createElement(Input, {\n    isUsernameSearch: !!channelSearch,\n    onChange: function (_a) {\n      var value = _a.target.value;\n\n      if (!isCleared || value !== '') {\n        setCleared(false);\n        setDebouncedInput(value);\n      }\n    },\n    value: isCleared ? '' : debouncedTerm,\n    placeholder: activeChannel ? \"Search \" + activeChannel.display_name : placeholder,\n    autoCapitalize: \"off\",\n    autoCorrect: \"off\",\n    autoComplete: \"off\",\n    ref: inputRef,\n    onKeyUp: onKeyUp\n  }), react_1.default.createElement(search_button_1.default, null));\n};\n\nSearchBar.className = 'giphy-search-bar';\nexports.default = SearchBar;\nvar templateObject_1, templateObject_2, templateObject_3;","map":{"version":3,"mappings":"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","names":["usePrevious","value","ref","react_1","current","SEARCH_DEBOUNCE","Container","theme_1","div","templateObject_1","props","theme","Input","input","templateObject_3","mode","js_brand_1","isUsernameSearch","core_1","templateObject_2","SearchBar","_a","className","_b","placeholder","_c","clear","autoFocus","context_1","setSearch","activeChannel","setActiveChannel","term","channelSearch","debouncedTerm","setDebouncedInput","lastTerm","useDebounce_1","inputRef","previousActiveChannel","focus","isCleared","setCleared","onKeyUp","e","key","keyCode","undefined","join","search_bar_channel_1","onChange","display_name","autoCapitalize","autoCorrect","autoComplete","search_button_1","exports"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/react-components/src/components/search-bar/index.tsx"],"sourcesContent":["import { css } from '@emotion/core'\nimport { giphyBlack, giphyCharcoal, giphyIndigo, giphyLightGrey, giphyWhite } from '@giphy/js-brand'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport useDebounce from 'react-use/lib/useDebounce'\nimport { SearchContext } from './context'\nimport SearchBarChannel from './search-bar-channel'\nimport SearchButton from './search-button'\nimport styled, { getSize } from './theme'\n\nfunction usePrevious<T>(value: T) {\n    const ref = useRef<T>(value)\n    useEffect(() => {\n        ref.current = value\n    })\n    return ref.current\n}\n\nconst SEARCH_DEBOUNCE = 500\n\ntype Props = {\n    className?: string\n    placeholder?: string\n    // clears the input until the next entry,\n    // leaves the term in context unaffected\n    clear?: boolean\n    autoFocus?: boolean\n}\n\nconst Container = styled.div`\n    display: flex;\n    background: white;\n    ${(props) => getSize(props.theme)}\n`\n\nconst Input = styled.input<{ isUsernameSearch: boolean }>`\n    background: ${(props) => (props.theme.mode === 'dark' ? giphyCharcoal : giphyWhite)};\n    box-sizing: border-box;\n    border: 0;\n    appearance: none;\n    font-weight: normal;\n    font-family: interface, Helvetica Neue, helvetica, sans-serif;\n    outline: 0;\n    font-size: 15px;\n    padding: 0 10px;\n    border-radius: 0;\n    text-overflow: ellipsis;\n    color: ${(props) => (props.theme.mode === 'dark' ? giphyWhite : giphyBlack)};\n    &::placeholder {\n        color: ${(props) => (props.theme.mode === 'dark' ? giphyLightGrey : giphyLightGrey)};\n    }\n    min-width: 150px;\n    flex: 1;\n    ${(props) =>\n        props.isUsernameSearch &&\n        css`\n            color: ${giphyIndigo};\n        `}\n`\n\nconst SearchBar = ({ className, placeholder = `Search GIPHY`, clear = false, autoFocus }: Props) => {\n    const { setSearch, activeChannel, setActiveChannel, term, channelSearch } = useContext(SearchContext)\n\n    // debounce local input\n    const [debouncedTerm, setDebouncedInput] = useState<string>(term)\n\n    // used to see if the last term was a '' before clearing\n    const lastTerm = usePrevious(debouncedTerm)\n    // set the term when it changes\n    useDebounce(() => setSearch(debouncedTerm), SEARCH_DEBOUNCE, [debouncedTerm])\n\n    // used only to focus the input\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    // we'll use this to see when we went from no channel to channel\n    const previousActiveChannel = usePrevious(activeChannel)\n\n    useEffect(() => {\n        if (autoFocus) {\n            inputRef.current?.focus()\n        }\n    }, [autoFocus])\n\n    useEffect(() => {\n        // if we know have a channel, focus and clear the input\n        // so the user can search the channel\n        if (activeChannel && !previousActiveChannel) {\n            inputRef.current?.focus()\n            setDebouncedInput('')\n        }\n    }, [debouncedTerm, activeChannel, previousActiveChannel])\n\n    // a pill could have been clicked, update our local term state\n    useEffect(() => {\n        setDebouncedInput(term)\n    }, [term])\n\n    const [isCleared, setCleared] = useState(clear)\n\n    useEffect(() => {\n        setCleared(clear)\n    }, [clear])\n\n    // key ups to clear the active channel\n    const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        const key = e.keyCode || e.key\n        switch (key) {\n            case 8: // backspace\n            case 'Backspace':\n                if (lastTerm === '') {\n                    setActiveChannel(undefined)\n                }\n                break\n            case 27: // esc\n            case `Escape`: // esc\n                setActiveChannel(undefined)\n                break\n            default:\n                break\n        }\n    }\n\n    return (\n        <Container className={[SearchBar.className, className].join(' ')}>\n            <SearchBarChannel />\n            <Input\n                isUsernameSearch={!!channelSearch}\n                onChange={({ target: { value } }) => {\n                    if (!isCleared || value !== '') {\n                        setCleared(false)\n                        setDebouncedInput(value)\n                    }\n                }}\n                value={isCleared ? '' : debouncedTerm}\n                placeholder={activeChannel ? `Search ${activeChannel.display_name}` : placeholder}\n                autoCapitalize=\"off\"\n                autoCorrect=\"off\"\n                autoComplete=\"off\"\n                ref={inputRef}\n                onKeyUp={onKeyUp}\n            />\n            <SearchButton />\n        </Container>\n    )\n}\n\nSearchBar.className = 'giphy-search-bar'\n\nexport default SearchBar\n"]},"metadata":{},"sourceType":"script"}