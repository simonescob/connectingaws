{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setRenditionScaleUpMaxPixels = void 0;\n\nvar log_1 = require(\"./log\");\n\nvar closestArea = function (width, height, renditions) {\n  var currentBest = Infinity;\n  var result; // sort the renditions so we can avoid scaling up low resolutions\n\n  renditions.forEach(function (rendition) {\n    var widthPercentage = rendition.width / width;\n    var heightPercentage = rendition.height / height; // a width percentage of 1 is exact, 2 is double, .5 half etc\n\n    var areaPercentage = widthPercentage * heightPercentage; // img could be bigger or smaller\n\n    var testBest = Math.abs(1 - areaPercentage); // the closer to 0 the better\n\n    if (testBest < currentBest) {\n      currentBest = testBest;\n      result = rendition;\n    }\n  });\n  return result;\n};\n\nvar SCALE_UP_MAX_PIXELS = 50;\n\nvar setRenditionScaleUpMaxPixels = function (pixels) {\n  log_1.Logger.debug(\"@giphy/js-util set rendition selection scale up max pixels to \" + pixels);\n  SCALE_UP_MAX_PIXELS = pixels;\n};\n\nexports.setRenditionScaleUpMaxPixels = setRenditionScaleUpMaxPixels;\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\n\nfunction bestfit(renditions, width, height, scaleUpMaxPixels) {\n  if (scaleUpMaxPixels === void 0) {\n    scaleUpMaxPixels = SCALE_UP_MAX_PIXELS;\n  }\n\n  var largestRendition = renditions[0]; // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n\n  var testRenditions = renditions.filter(function (rendition) {\n    if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n      largestRendition = rendition;\n    }\n\n    return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels;\n  }); // if all are too small, use the largest we have\n\n  if (testRenditions.length === 0) {\n    return largestRendition;\n  } // find the closest area of the filtered renditions\n\n\n  return closestArea(width, height, testRenditions);\n}\n\nexports.default = bestfit;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA,IAAMA,WAAW,GAAG,UAACC,KAAD,EAAgBC,MAAhB,EAAgCC,UAAhC,EAAwD;AACxE,MAAIC,WAAW,GAAGC,QAAlB;AACA,MAAIC,MAAJ,CAFwE,CAGxE;;AACAH,YAAU,CAACI,OAAX,CAAmB,UAACC,SAAD,EAAsB;AACrC,QAAMC,eAAe,GAAGD,SAAS,CAACP,KAAV,GAAkBA,KAA1C;AACA,QAAMS,gBAAgB,GAAGF,SAAS,CAACN,MAAV,GAAmBA,MAA5C,CAFqC,CAGrC;;AACA,QAAMS,cAAc,GAAGF,eAAe,GAAGC,gBAAzC,CAJqC,CAKrC;;AACA,QAAME,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,IAAIH,cAAb,CAAjB,CANqC,CAMS;;AAC9C,QAAIC,QAAQ,GAAGR,WAAf,EAA4B;AACxBA,iBAAW,GAAGQ,QAAd;AACAN,YAAM,GAAGE,SAAT;AACH;AACJ,GAXD;AAYA,SAAOF,MAAP;AACH,CAjBD;;AAmBA,IAAIS,mBAAmB,GAAG,EAA1B;;AACO,IAAMC,4BAA4B,GAAG,UAACC,MAAD,EAAe;AACvDC,eAAOC,KAAP,CAAa,mEAAiEF,MAA9E;AACAF,qBAAmB,GAAGE,MAAtB;AACH,CAHM;;AAAMG,uCAA4BJ,4BAA5B;AAIb;;;;;;;;;;;;;;;AAcA,SAASK,OAAT,CACIlB,UADJ,EAEIF,KAFJ,EAGIC,MAHJ,EAIIoB,gBAJJ,EAIkD;AAA9C;AAAAA;AAA8C;;AAEzC,sBAAgB,GAAInB,UAAU,GAA9B,CAFyC,CAG9C;;AACA,MAAMoB,cAAc,GAAGpB,UAAU,CAACqB,MAAX,CAAkB,qBAAS;AAC9C,QAAIhB,SAAS,CAACP,KAAV,GAAkBO,SAAS,CAACN,MAA5B,GAAqCuB,gBAAgB,CAACxB,KAAjB,GAAyBwB,gBAAgB,CAACvB,MAAnF,EAA2F;AACvFuB,sBAAgB,GAAGjB,SAAnB;AACH;;AACD,WAAOP,KAAK,GAAGO,SAAS,CAACP,KAAlB,IAA2BqB,gBAA3B,IAA+CpB,MAAM,GAAGM,SAAS,CAACN,MAAnB,IAA6BoB,gBAAnF;AACH,GALsB,CAAvB,CAJ8C,CAU9C;;AACA,MAAIC,cAAc,CAACG,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,WAAOD,gBAAP;AACH,GAb6C,CAc9C;;;AACA,SAAOzB,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBqB,cAAhB,CAAlB;AACH;;AAEDH,kBAAeC,OAAf","names":["closestArea","width","height","renditions","currentBest","Infinity","result","forEach","rendition","widthPercentage","heightPercentage","areaPercentage","testBest","Math","abs","SCALE_UP_MAX_PIXELS","setRenditionScaleUpMaxPixels","pixels","log_1","debug","exports","bestfit","scaleUpMaxPixels","testRenditions","filter","largestRendition","length"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/js-util/src/bestfit.ts"],"sourcesContent":["import { IRendition } from '@giphy/js-types'\nimport { Logger } from './log'\n\nconst closestArea = (width: number, height: number, renditions: IRendition[]) => {\n    let currentBest = Infinity\n    let result: IRendition\n    // sort the renditions so we can avoid scaling up low resolutions\n    renditions.forEach((rendition: IRendition) => {\n        const widthPercentage = rendition.width / width\n        const heightPercentage = rendition.height / height\n        // a width percentage of 1 is exact, 2 is double, .5 half etc\n        const areaPercentage = widthPercentage * heightPercentage\n        // img could be bigger or smaller\n        const testBest = Math.abs(1 - areaPercentage) // the closer to 0 the better\n        if (testBest < currentBest) {\n            currentBest = testBest\n            result = rendition\n        }\n    })\n    return result!\n}\n\nlet SCALE_UP_MAX_PIXELS = 50\nexport const setRenditionScaleUpMaxPixels = (pixels: number) => {\n    Logger.debug(`@giphy/js-util set rendition selection scale up max pixels to ${pixels}`)\n    SCALE_UP_MAX_PIXELS = pixels\n}\n/**\n * Finds image rendition that best fits a given container preferring images\n * ##### Note: all renditions are assumed to have the same aspect ratio\n *\n * When we have a portrait target and landscape gif, we choose a higher rendition to match\n * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)\n *\n * @name bestfit\n * @function\n * @param {Array.<Object>} renditions available image renditions each having a width and height property\n * @param {Number} width\n * @param {Number} height\n * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up\n */\nfunction bestfit(\n    renditions: Array<IRendition>,\n    width: number,\n    height: number,\n    scaleUpMaxPixels: number = SCALE_UP_MAX_PIXELS\n) {\n    let [largestRendition] = renditions\n    // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value\n    const testRenditions = renditions.filter(rendition => {\n        if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {\n            largestRendition = rendition\n        }\n        return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels\n    })\n    // if all are too small, use the largest we have\n    if (testRenditions.length === 0) {\n        return largestRendition\n    }\n    // find the closest area of the filtered renditions\n    return closestArea(width, height, testRenditions)\n}\n\nexport default bestfit\n"]},"metadata":{},"sourceType":"script"}