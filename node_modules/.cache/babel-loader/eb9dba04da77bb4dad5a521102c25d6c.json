{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nfunction fillArray(length, columnOffsets) {\n  if (columnOffsets === void 0) {\n    columnOffsets = [];\n  }\n\n  return Array.apply(null, Array(length)).map(function (_, index) {\n    return columnOffsets[index] || 0;\n  });\n}\n\nvar MasonryGrid = function (_a) {\n  var columns = _a.columns,\n      gutter = _a.gutter,\n      _b = _a.useTransform,\n      useTransform = _b === void 0 ? true : _b,\n      itemWidth = _a.itemWidth,\n      itemHeights = _a.itemHeights,\n      children = _a.children,\n      _c = _a.columnOffsets,\n      columnOffsets = _c === void 0 ? [] : _c;\n  var containerStyle = {};\n\n  function getChildren() {\n    var columnTarget;\n    var columnHeights = fillArray(columns, columnOffsets);\n    var result = react_1.default.Children.map(children, function (child, index) {\n      var style = {\n        position: 'absolute'\n      };\n      columnTarget = columnHeights.indexOf(Math.min.apply(Math, columnHeights));\n      var top = columnHeights[columnTarget] + \"px\";\n      var left = columnTarget * itemWidth + columnTarget * gutter + \"px\";\n\n      if (useTransform) {\n        style.transform = \"translate3d(\" + left + \", \" + top + \", 0)\";\n      } else {\n        // support positioned elements (default) or transformed elements\n        style.top = top;\n        style.left = left;\n      }\n\n      var height = itemHeights[index];\n\n      if (height) {\n        columnHeights[columnTarget] += height + gutter;\n      }\n\n      return react_1.default.cloneElement(child, {\n        style: style\n      });\n    });\n    containerStyle.position = 'relative';\n    containerStyle.width = columns * itemWidth + (columns - 1) * gutter + \"px\";\n    containerStyle.height = Math.max.apply(Math, columnHeights) - gutter + \"px\";\n    return result;\n  }\n\n  return react_1.default.createElement(\"div\", {\n    style: containerStyle\n  }, getChildren());\n};\n\nexports.default = react_1.memo(MasonryGrid);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,SAASA,SAAT,CAAmBC,MAAnB,EAAmCC,aAAnC,EAA+D;AAA5B;AAAAA;AAA4B;;AAC3D,SAAOC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACF,MAAD,CAAvB,EAAiCI,GAAjC,CAAqC,UAACC,CAAD,EAAIC,KAAJ,EAAS;AAAK,wBAAa,CAACA,KAAD,CAAb,IAAwB,CAAxB;AAAyB,GAA5E,CAAP;AACH;;AAWD,IAAMC,WAAW,GAAG,UAACC,EAAD,EAQZ;MAPJC,OAAO;MACPC,MAAM;MACNC;MAAAC,YAAY,mBAAG,IAAH,GAAOD;MACnBE,SAAS;MACTC,WAAW;MACXC,QAAQ;MACRC;MAAAf,aAAa,mBAAG,EAAH,GAAKe;AAElB,MAAMC,cAAc,GAAQ,EAA5B;;AACA,WAASC,WAAT,GAAoB;AAChB,QAAIC,YAAJ;AACA,QAAMC,aAAa,GAAarB,SAAS,CAACU,OAAD,EAAUR,aAAV,CAAzC;AACA,QAAMoB,MAAM,GAAGC,gBAAMC,QAAN,CAAenB,GAAf,CAAmBW,QAAnB,EAA6B,UAACS,KAAD,EAAyBlB,KAAzB,EAAsC;AAC9E,UAAMmB,KAAK,GAAQ;AACfC,gBAAQ,EAAE;AADK,OAAnB;AAGAP,kBAAY,GAAGC,aAAa,CAACO,OAAd,CAAsBC,IAAI,CAACC,GAAL,CAAS1B,KAAT,CAAeyB,IAAf,EAAqBR,aAArB,CAAtB,CAAf;AACA,UAAMU,GAAG,GAAMV,aAAa,CAACD,YAAD,CAAb,GAA2B,IAA1C;AACA,UAAMY,IAAI,GAAMZ,YAAY,GAAGN,SAAf,GAA2BM,YAAY,GAAGT,MAA1C,GAAgD,IAAhE;;AACA,UAAIE,YAAJ,EAAkB;AACda,aAAK,CAACO,SAAN,GAAkB,iBAAeD,IAAf,GAAmB,IAAnB,GAAwBD,GAAxB,GAA2B,MAA7C;AACH,OAFD,MAEO;AACH;AACAL,aAAK,CAACK,GAAN,GAAYA,GAAZ;AACAL,aAAK,CAACM,IAAN,GAAaA,IAAb;AACH;;AACD,UAAME,MAAM,GAAGnB,WAAW,CAACR,KAAD,CAA1B;;AACA,UAAI2B,MAAJ,EAAY;AACRb,qBAAa,CAACD,YAAD,CAAb,IAA+Bc,MAAM,GAAGvB,MAAxC;AACH;;AACD,aAAOY,gBAAMY,YAAN,CAAmBV,KAAnB,EAAgD;AAAEC,aAAK;AAAP,OAAhD,CAAP;AACH,KAnBc,CAAf;AAoBAR,kBAAc,CAACS,QAAf,GAA0B,UAA1B;AACAT,kBAAc,CAACkB,KAAf,GAA0B1B,OAAO,GAAGI,SAAV,GAAsB,CAACJ,OAAO,GAAG,CAAX,IAAgBC,MAAtC,GAA4C,IAAtE;AACAO,kBAAc,CAACgB,MAAf,GAA2BL,IAAI,CAACQ,GAAL,CAASjC,KAAT,CAAeyB,IAAf,EAAqBR,aAArB,IAAsCV,MAAtC,GAA4C,IAAvE;AACA,WAAOW,MAAP;AACH;;AAED,SAAOC;AAAKG,SAAK,EAAER;AAAZ,KAA6BC,WAAW,EAAxC,CAAP;AACH,CAxCD;;AA0CAmB,kBAAef,aAAKf,WAAL,CAAf","names":["fillArray","length","columnOffsets","Array","apply","map","_","index","MasonryGrid","_a","columns","gutter","_b","useTransform","itemWidth","itemHeights","children","_c","containerStyle","getChildren","columnTarget","columnHeights","result","react_1","Children","child","style","position","indexOf","Math","min","top","left","transform","height","cloneElement","width","max","exports"],"sources":["/home/simo/programming/web/projects/search-gifs/node_modules/@giphy/react-components/src/components/masonry-grid.tsx"],"sourcesContent":["import React, { memo, ReactNode } from 'react'\n\nfunction fillArray(length: number, columnOffsets: number[] = []) {\n    return Array.apply(null, Array(length)).map((_, index) => columnOffsets[index] || 0)\n}\n\ntype Props = {\n    columns: number\n    gutter: number\n    useTransform?: boolean\n    children: ReactNode\n    itemHeights: number[]\n    itemWidth: number\n    columnOffsets?: number[]\n}\nconst MasonryGrid = ({\n    columns,\n    gutter,\n    useTransform = true,\n    itemWidth,\n    itemHeights,\n    children,\n    columnOffsets = [],\n}: Props) => {\n    const containerStyle: any = {}\n    function getChildren() {\n        let columnTarget: number\n        const columnHeights: number[] = fillArray(columns, columnOffsets)\n        const result = React.Children.map(children, (child: React.ReactNode, index: number) => {\n            const style: any = {\n                position: 'absolute',\n            }\n            columnTarget = columnHeights.indexOf(Math.min.apply(Math, columnHeights))\n            const top = `${columnHeights[columnTarget]}px`\n            const left = `${columnTarget * itemWidth + columnTarget * gutter}px`\n            if (useTransform) {\n                style.transform = `translate3d(${left}, ${top}, 0)`\n            } else {\n                // support positioned elements (default) or transformed elements\n                style.top = top\n                style.left = left\n            }\n            const height = itemHeights[index]\n            if (height) {\n                columnHeights[columnTarget] += height + gutter\n            }\n            return React.cloneElement(child as React.ReactElement, { style })\n        })\n        containerStyle.position = 'relative'\n        containerStyle.width = `${columns * itemWidth + (columns - 1) * gutter}px`\n        containerStyle.height = `${Math.max.apply(Math, columnHeights) - gutter}px`\n        return result\n    }\n\n    return <div style={containerStyle}>{getChildren()}</div>\n}\n\nexport default memo(MasonryGrid)\n"]},"metadata":{},"sourceType":"script"}